<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <!-- 
    
    All help messages 
    
    -->
  <data name="Basic_Help" xml:space="preserve">
    <value>This tool can memorize actions and execute them.
Currently supports:
    Url
    Script
    Executable

Usage:
    fcli &lt;tool?&gt; [params ...] [flags ...]

    fcli add C:\Awesome --exe --name awe
    fcli awe

For more information about the tools use --help.
To list all tools or commands use:
    fcli list
    fcli list --tool</value>
  </data>
  <data name="Full_Help" xml:space="preserve">
    <value>This tool can be used to remember apps, sites and script files, and call them afterwards. This should help with using command line.

Syntax:
    fcli &lt;tool/command&gt; [flags...]

Tools:
    Tools manipulate command storage and do informational work.

    add    - stores new command to storage.
    remove - deletes a known command from storage.
    list   - displays all known commands or tools.
    run    - performs a command without saving it.

    More detailed info about each command can be access by specifying special flag --help after that specific tool.

Commands:
    If given argument doesn't align with a known tool or it's alias it is considered a command. If this command is known, then it gets executed in the most appropriate vay.
    All known commands can be listed using list tool.

Usage:
    fcli add c:\awesome --exe -name aw
    fcli aw --options "-s 2"
    fcli remove aw
    fcli add https://google.com --name google
    fcli google</value>
  </data>
  <data name="Add_Help" xml:space="preserve">
    <value>Add - validates a new command and adds it to the storage. Requires a valid path or url as an argument.
Flags:
    --script &lt;shell&gt; - the path points to the script file.
    --exe            - the path points to the executable.
    --url            - the argument is a url.
    --name &lt;value&gt;   - explicitly specify the name for the command.
    --options &lt;args&gt; - options to run exe or script with.
    --help           - show description.
Usage:
    fcli add c:/awesome.exe
    fcli add .\scripts\script --script bash --name sc</value>
  </data>
  <data name="List_Help" xml:space="preserve">
    <value>List - echos existing commands to the console based on the selection given by flags. If no flags given - lists all existing commands.
Flags:
    --script - adds scripts to listing.
    --exe    - adds executables to listing.
    --url    - adds urls to listing.
    --tools  - lists all available tool selectors.
    --help   - show description.
Usage:
    fcli list
    fcli list --tools
    fcli ls --script --url</value>
  </data>
  <data name="Remove_Help" xml:space="preserve">
    <value>Remove - deletes command from storage.
Flags:
    --yes  - skip confirmation.
    --all  - removes all known commands.
    --help - show description.
Usage:
    fcli remove awesome --yes</value>
  </data>
  <data name="Run_Help" xml:space="preserve">
    <value>Run - executes given path or url without saving. Useful for testing. Requires path or url, as well as explicit specification of run type through a flag.
Flags:
    --script &lt;shell&gt; - run as script.
    --exe            - run as executable.
    --url            - run as url.
    --help           - show description.
Usage:
    fcli run c:/awesome --script powershell
    fcli run https://awesome.com --url</value>
  </data>
  <data name="Config_Help" xml:space="preserve">
    <value>Config tool allows to manipulate current user config. Using this you can change some values store or purge config. List current config state if nothing is specified.
Flags:
    --locale &lt;loc&gt;     - sets culture locale for the tool.
        - supported locales: en, ru, uk.
    --formatter &lt;type&gt; - sets console formatter to use for messaging.
        - inline       - displays most messages as a single line.
        - pretty       - more verbose and uses multiline templates.
    --purge            - deletes current config.
Usage:
    fcli config
    fcli cnf --locale en --formatter pretty
    fcli config --purge</value>
  </data>

  <!--

    Error messages

  -->

  <data name="FCli_CriticalError" xml:space="preserve">
    <value>Something went horribly wrong!
[{0}]: {1}</value>
  </data>
  <data name="FCli_UnknownShell" xml:space="preserve">
    <value>Script flag must also specify type of shell.
Supported shells: {0}.</value>
  </data>

  <!--

    Tool strings

  -->
  <data name="Tool_FlagShouldNotHaveValue" xml:space="preserve">
    <value>Flag (--{0}) shouldn't have any value.
To see list of all supported flags for {1} tool consult help page using --help flag.</value>
  </data>
  <data name="Tool_FlagShouldHaveValue" xml:space="preserve">
    <value>Flag (--{0}) should have a value.
To see list of all supported flags for {1} tool consult help page using --help flag.</value>
  </data>
  <data name="Tool_FlagIsUnknown" xml:space="preserve">
    <value>Flag (--{0}) is not a known flag for the {1} tool.
To see list of all supported flags for {2} tool consult help page using --help flag.</value>
  </data>
  <data name="Tool_UrlIsInvalid" xml:space="preserve">
    <value>({0}) - is not a valid url.</value>
  </data>
  <data name="Tool_PathIsInvalid" xml:space="preserve">
    <value>({0}) - is not a valid system path.</value>
  </data>
  <!--

    Add tool strings

  -->
  <data name="Add_NoArg" xml:space="preserve">
    <value>Add tool requires an argument - a path or url.</value>
  </data>
  <data name="Add_MultipleTypeFlags" xml:space="preserve">
    <value>Add tool can accept only one of the type flags.</value>
  </data>
  <data name="Add_FileUnrecognized" xml:space="preserve">
    <value>Couldn't recognize the type of file.
Please, specify it using type flags. 
To see the list of type flags use --help.</value>
  </data>
  <data name="Add_CommandNotDetermined" xml:space="preserve">
    <value>The type of file wasn't determined. FCli recognizes only file path or url. You can force execution using type flags. Consult help page for more info.</value>
  </data>
  <data name="Add_NameAlreadyExists" xml:space="preserve">
    <value>Name ({0}) is a known command or tool.
Use --name flag to specify explicitly a name for the command.</value>
  </data>
  <data name="Add_BashOnWindows" xml:space="preserve">
    <value>Command ({0}) is interpreted as a bash script, but Windows operating system is currently running. Bash scripts can be executed on Windows, FCli uses WSL for that. You need to make sure that your system has WSL installed and default distro enabled.</value>
  </data>
  <data name="Add_FishOnWindows" xml:space="preserve">
    <value>Command ({0}) is interpreted as a Fish script, but Windows operating system is currently running. Fish is only supported on Unix-like operating systems.</value>
  </data>
  <data name="Add_CmdOnLinux" xml:space="preserve">
    <value>Command ({0}) is interpreted as a batch file, but Linux operating system is running. CMD is only supported on Windows.</value>
  </data>
  <data name="Add_PowershellOnLinux" xml:space="preserve">
    <value>Command ({0}) is interpreted as a powershell script, but Linux operating system is running. PS scripts can be executed on Linux, but powershell needs to be installed from the packet manager.</value>
  </data>
  <data name="Add_OSScript_Question" xml:space="preserve">
    <value>Are you sure you can run this type of script?</value>
  </data>
  <data name="Add_OSScript_Avert" xml:space="preserve">
    <value>Averting add process...</value>
  </data>
  <data name="Add_OSScript_Continue" xml:space="preserve">
    <value>Continuing add process...</value>
  </data>
  <data name="Add_ParsedCommand" xml:space="preserve">
    <value>Command was parsed:
  name    - {0}
  type    - {1}
  shell   - {2}
  path    - {3}
  options - {4}</value>
  </data>
  <data name="Add_Saving" xml:space="preserve">
    <value>Saving to storage...</value>
  </data>
  <data name="Add_Saved" xml:space="preserve">
    <value>Saved.
To use the command try:
  fcli {0}</value>
  </data>
  <!--

    Config tool strings

  -->
  <data name="Config_Arg" xml:space="preserve">
    <value>Config tool cannot have any arguments.
For Config tool syntax consult help page using --help.</value>
  </data>
  <data name="Config_ListConfig" xml:space="preserve">
    <value>No flags given, listing current config:</value>
  </data>
  <data name="Config_Formatter" xml:space="preserve">
    <value>Formatter: {0}</value>
  </data>
  <data name="Config_Locale" xml:space="preserve">
    <value>Locale: {0}</value>
  </data>
  <data name="Config_UnknownLocale" xml:space="preserve">
    <value>Unsupported locale was specified via --locale flag.
To see supported locales consult help page.</value>
  </data>
  <data name="Config_LocaleChangeWarning" xml:space="preserve">
    <value>Preparing to change locale from ({0}) to ({1})...</value>
  </data>
  <data name="Config_LocaleChanged" xml:space="preserve">
    <value>Locale changed.</value>
  </data>
  <data name="Config_UnsupportedFormatter" xml:space="preserve">
    <value>Unsupported formatter was specified via --formatter flag.
To see supported console formatters consult help page.</value>
  </data>
  <data name="Config_FormatterChangeWarning" xml:space="preserve">
    <value>Preparing to change command line formatter from ({0}) to ({1})...</value>
  </data>
  <data name="Config_FormatterChanged" xml:space="preserve">
    <value>Formatter changed.</value>
  </data>
  <data name="Config_PurgeWarning" xml:space="preserve">
    <value>You are about to purge your dynamic configuration, all your setups will be lost. Are you sure you want to proceed?</value>
  </data>
  <data name="Config_PurgeAverted" xml:space="preserve">
    <value>Config purge averted.</value>
  </data>
  <data name="Config_Purging" xml:space="preserve">
    <value>Purging...</value>
  </data>
  <data name="Config_Purged" xml:space="preserve">
    <value>Purged.</value>
  </data>
  <!--

    List tool strings

  -->
  <data name="List_NoCommands" xml:space="preserve">
    <value>There are no known commands.</value>
  </data>
  <data name="List_ListAllCommands" xml:space="preserve">
    <value>No flags given, listing all commands:</value>
  </data>
  <data name="List_ListCommands" xml:space="preserve">
    <value>Listing all commands of type ({0}):</value>
  </data>
  <data name="List_NoCommandsSelected" xml:space="preserve">
    <value>There are no known ({0}) commands.</value>
  </data>
  <data name="List_ToolArg" xml:space="preserve">
    <value>(--tool) cannot be used with a filer.</value>
  </data>
  <data name="List_Tools" xml:space="preserve">
    <value>All known tool selectors:</value>
  </data>
  <data name="List_NothingFiltered" xml:space="preserve">
    <value>No commands were found with given filter: {0}</value>
  </data>
  <!--

    Remove tool strings

  -->
  <data name="Remove_InvalidArg" xml:space="preserve">
    <value>({0}) - is not a recognized command name.
To see all command selectors try: fcli list.</value>
  </data>
  <data name="Remove_AllWarning" xml:space="preserve">
    <value>All flag: preparing to delete all known commands.
Are you sure?</value>
  </data>
  <data name="Remove_NoCommands" xml:space="preserve">
    <value>There are no commands to delete!</value>
  </data>
  <data name="Remove_AllDeleted" xml:space="preserve">
    <value>All existing commands have been deleted.</value>
  </data>
  <data name="Remove_Averted" xml:space="preserve">
    <value>Deletion averted.</value>
  </data>
  <data name="Remove_Deleting" xml:space="preserve">
    <value>Deleting...</value>
  </data>
  <data name="Remove_Warning" xml:space="preserve">
    <value>Preparing to delete {0} command.
Are you sure?</value>
  </data>
  <data name="Remove_Deleted" xml:space="preserve">
    <value>Command ({0}) was successfully deleted.</value>
  </data>
  <!--

    Run tool strings

  -->
  <data name="Run_NoArg" xml:space="preserve">
    <value>You need to specify a command to test.
To see Run tool usage consult --help.</value>
  </data>
  <data name="Run_MultipleTypeFlags" xml:space="preserve">
    <value>Run tool can accept only one of the type flags.</value>
  </data>  
  <data name="Run_UnknownCommand" xml:space="preserve">
    <value>Command type wasn't recognized. Please specify it using a type flag.
To see Run syntax and available type flags use --help.</value>
  </data>
  <!--

    Command Factory strings

  -->
  <data name="Command_CmdOnWindows" xml:space="preserve">
    <value>CMD scripts cannot be run on Linux systems!</value>
  </data>
  <data name="Command_PowershellOnLinux" xml:space="preserve">
    <value>Attempting to execute on Linux..</value>
  </data>
  <data name="Command_BashOnWindows" xml:space="preserve">
    <value></value>
  </data>
  <data name="" xml:space="preserve">
    <value></value>
  </data>
  
</root>