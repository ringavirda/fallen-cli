<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddHelp" xml:space="preserve">
    <value>Add - validates a new command and adds it to the storage.
Requires a valid path or url as an argument.
Flags:
    --script &lt;shell&gt; - the path points to the script file.
    --exe            - the path points to the executable.
    --url            - the argument is a url.
    --name &lt;value&gt;   - explicitly specify the name for the command.
    --options &lt;args&gt; - options to run exe or script with.
    --help           - show description.
Usage:
    fcli add c:/awesome.exe
    fcli add .\scripts\script --script bash --name sc</value>
  </data>
  <data name="BasicHelp" xml:space="preserve">
    <value>This tool can memorize actions and execute them.
Currently supports:
    Url
    Script
    Executable

Usage:
    fcli &lt;tool?&gt; [params ...] [flags ...]

    fcli add C:\Awesome --exe --name awe
    fcli awe

For more information about the tools use --help.
To list all tools or commands use:
    fcli list
    fcli list --tool</value>
  </data>
  <data name="FullHelp" xml:space="preserve">
    <value>This tool can be used to remember apps, sites and script files, and
call them afterwards. This should help with using command line.

Syntax:
    fcli &lt;tool/command&gt; [flags...]

Tools:
    Tools manipulate command storage and do informational work.

    add    - stores new command to storage.
    remove - deletes a known command from storage.
    list   - displays all known commands or tools.
    run    - performs a command without saving it.

    More detailed info about each command can be access by specifying
    special flag --help after that specific tool.

Commands:
    If given argument doesn't align with a known tool or it's alias
    it is considered a command. If this command is known, then it gets
    executed in the most appropriate vay.
    All known commands can be listed using list tool.

Usage:
    fcli add c:\awesome --exe -name aw
    fcli aw --options "-s 2"
    fcli remove aw
    fcli add https://google.com --name google
    fcli google</value>
  </data>
  <data name="ListHelp" xml:space="preserve">
    <value>List - echos existing commands to the console based on the selection
given by flags. If no flags given - lists all existing commands.
Flags:
    --script - adds scripts to listing.
    --exe    - adds executables to listing.
    --url    - adds urls to listing.
    --tools  - lists all available tool selectors.
    --help   - show description.
Usage:
    fcli list
    fcli list --tools
    fcli ls --script --url</value>
  </data>
  <data name="RemoveHelp" xml:space="preserve">
    <value>Remove - deletes command from storage.
Flags:
    --yes  - skip confirmation.
    --all  - removes all known commands.
    --help - show description.
Usage:
    fcli remove awesome --yes</value>
  </data>
  <data name="RunHelp" xml:space="preserve">
    <value>Run - executes given path or url without saving. Useful for testing.
Requires path or url, as well as explicit specification of run type
through a flag.
Flags:
    --script &lt;shell&gt; - run as script.
    --exe            - run as executable.
    --url            - run as url.
    --help           - show description.
Usage:
    fcli run c:/awesome --script powershell
    fcli run https://awesome.com --url</value>
  </data>
</root>